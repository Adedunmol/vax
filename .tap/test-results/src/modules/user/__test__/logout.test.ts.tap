Initializing Redis Client...
TAP version 14
connected to redis
# Subtest: ✅ Should logout successfully
    not ok 1 - should be equal
      ---
      compare: ===
      at:
        fileName: src\modules\user\__test__\logout.test.ts
        lineNumber: 39
        columnNumber: 7
        isToplevel: true
        generated:
          fileName: src/modules/user/__test__/logout.test.ts
          lineNumber: 49
          columnNumber: 7
      stack: |
        src/modules/user/__test__/logout.test.ts:39:7
        Generator.next
        fulfilled (src/modules/user/__test__/logout.test.ts:5:58)
      source: "    const fastify = build();\r
      
        \    t.teardown(() => fastify.close());\r
      
        \r
      
        \    const response = await fastify.inject({\r
      
        \        method: \"POST\",\n"
      diff: |
        --- expected
        +++ actual
        @@ -1,1 +1,1 @@
        -204
        +404
      ...
    
    ok 2 - should be equal
    1..2
not ok 1 - ✅ Should logout successfully # time=2747.888ms
  ---
  at:
    fileName: src\modules\user\__test__\logout.test.ts
    lineNumber: 27
    columnNumber: 16
    typeName: Object
    generated:
      fileName: src/modules/user/__test__/logout.test.ts
      lineNumber: 37
      columnNumber: 16
  source: "\r
  
    \    const response = await fastify.inject({\r
  
    \        method: \"POST\",\r
  
    ---------------^
  
    \        url,\r
  
    \        cookies: { jwt: refreshToken }\n"
  ...

# Subtest: ✅ Should return 204 if no refresh token is provided
    not ok 1 - should be equal
      ---
      compare: ===
      at:
        fileName: src\modules\user\__test__\logout.test.ts
        lineNumber: 49
        columnNumber: 7
        isToplevel: true
        generated:
          fileName: src/modules/user/__test__/logout.test.ts
          lineNumber: 59
          columnNumber: 7
      stack: |
        src/modules/user/__test__/logout.test.ts:49:7
        Generator.next
        fulfilled (src/modules/user/__test__/logout.test.ts:5:58)
      source: "\r
      
        test(\"✅ Should return 204 if token is invalid and clear cookie\", async (t)
        => {\r
      
        \    const fastify = build();\r
      
        ------^
      
        \    const invalidTokenStub = ImportMock.mockFunction(UserService,
        'findUserWithToken', null);\n"
      diff: |
        --- expected
        +++ actual
        @@ -1,1 +1,1 @@
        -204
        +404
      ...
    
    1..1
# error thrown in teardown
not ok 2 - ✅ Should return 204 if no refresh token is provided # time=1638.094ms
  ---
  at:
    fileName: src\modules\user\__test__\logout.test.ts
    lineNumber: 42
    columnNumber: 16
    typeName: Object
    generated:
      fileName: src/modules/user/__test__/logout.test.ts
      lineNumber: 52
      columnNumber: 16
  source: "    const response = await fastify.inject({\r
  
    \        method: \"POST\",\r
  
    \        url\r
  
    \    });\n"
  ...

# Subtest: ✅ Should return 204 if token is invalid and clear cookie
    not ok 1 - fastify-plugin: Plugin did not start in time: '@fastify/redis'. You may have forgotten to call 'done' function or to resolve a Promise
      ---
      stack: |
        manageErr (node_modules/fastify/fastify.js:628:33)
        node_modules/fastify/fastify.js:614:11
        Object._encapsulateThreeParam (node_modules/avvio/boot.js:600:7)
        Boot.timeoutCall (node_modules/avvio/boot.js:494:5)
        Boot.callWithCbOrNextTick (node_modules/avvio/boot.js:476:19)
        release (node_modules/fastq/queue.js:171:16)
        Object.resume (node_modules/fastq/queue.js:103:7)
        node_modules/avvio/boot.js:116:18
        node_modules/avvio/boot.js:437:7
        done (node_modules/avvio/lib/plugin.js:226:5)
      at:
        fileName: node_modules\fastify\fastify.js
        lineNumber: 628
        columnNumber: 33
        functionName: manageErr
      type: FastifyError
      code: FST_ERR_PLUGIN_TIMEOUT
      statusCode: 500
      tapCaught: returnedPromiseRejection
      source: |2
              // as cause
              err = err != null && AVVIO_ERRORS_MAP[err.code] != null
                ? appendStackTrace(err, new AVVIO_ERRORS_MAP[err.code](err.message))
        --------------------------------^
                : err
      cause:
        stack: |
          Timeout._onTimeout (node_modules/avvio/lib/plugin.js:114:31)
        at:
          fileName: node_modules\avvio\lib\plugin.js
          lineNumber: 114
          columnNumber: 31
          typeName: Timeout
          methodName: _onTimeout
          functionName: Timeout._onTimeout
        type: FastifyError
        code: AVV_ERR_PLUGIN_EXEC_TIMEOUT
        statusCode: 500
        fn: !class |-
          function fastifyRedis (fastify, options, next) {
            const { namespace, url, closeClient = false, ...redisOptions } = options
      
            let client = options.client || null
      
            if (namespace) {
              if (!fastify.redis) {
                fastify.decorate('redis', Object.create(null))
              }
      
              if (fastify.redis[namespace]) {
                return next(new Error(`Redis '${namespace}' instance namespace has already been registered`))
              }
      
              const closeNamedInstance = (fastify) => {
                return fastify.redis[namespace].quit()
              }
      
              if (client) {
                if (closeClient === true) {
                  fastify.addHook('onClose', closeNamedInstance)
                }
              } else {
                try {
                  if (url) {
                    client = new Redis(url, redisOptions)
                  } else {
                    client = new Redis(redisOptions)
                  }
                } catch (err) {
                  return next(err)
                }
      
                fastify.addHook('onClose', closeNamedInstance)
              }
      
              fastify.redis[namespace] = client
            } else {
              if (fastify.redis) {
                return next(new Error('@fastify/redis has already been registered'))
              } else {
                if (client) {
                  if (closeClient === true) {
                    fastify.addHook('onClose', close)
                  }
                } else {
                  try {
                    if (url) {
                      client = new Redis(url, redisOptions)
                    } else {
                      client = new Redis(redisOptions)
                    }
                  } catch (err) {
                    return next(err)
                  }
      
                  fastify.addHook('onClose', close)
                }
      
                fastify.decorate('redis', client)
              }
            }
      
            // Testing this make the process crash on latest TAP :(
            /* istanbul ignore next */
            const onEnd = function (err) {
              client
                .off('ready', onReady)
                .off('error', onError)
                .off('end', onEnd)
                .quit()
      
              next(err)
            }
      
            const onReady = function () {
              client
                .off('end', onEnd)
                .off('error', onError)
                .off('ready', onReady)
      
              next()
            }
      
            // Testing this make the process crash on latest TAP :(
            /* istanbul ignore next */
            const onError = function (err) {
              if (err.code === 'ENOTFOUND') {
                onEnd(err)
                return
              }
      
              // Swallow network errors to allow ioredis
              // to perform reconnection and emit 'end'
              // event if reconnection eventually
              // fails.
              // Any other errors during startup will
              // trigger the 'end' event.
              if (err instanceof Redis.ReplyError) {
                onEnd(err)
              }
            }
      
            // ioredis provides it in a .status property
            if (client.status === 'ready') {
              // client is already connected, do not register event handlers
              // call next() directly to avoid ERR_AVVIO_PLUGIN_TIMEOUT
              next()
            } else {
              // ready event can still be emitted
              client
                .on('end', onEnd)
                .on('error', onError)
                .on('ready', onReady)
      
              client.ping().catch(onError)
            }
          }
        source: |2
                debug('timed out', name)
                timer = null
                const readyTimeoutErr = new AVV_ERR_PLUGIN_EXEC_TIMEOUT(name)
          ------------------------------^
                // TODO Remove reference to function
                readyTimeoutErr.fn = func
        message: "Plugin did not start in time: '@fastify/redis'. You may have forgotten
          to call 'done' function or to resolve a Promise"
      ...
    
    1..1
not ok 3 - ✅ Should return 204 if token is invalid and clear cookie # time=10075.952ms
  ---
  at:
    fileName: src\modules\user\__test__\logout.test.ts
    lineNumber: 51
    columnNumber: 16
    typeName: Object
    generated:
      fileName: src/modules/user/__test__/logout.test.ts
      lineNumber: 61
      columnNumber: 16
  source: "    const fastify = build();\r
  
    \    const invalidTokenStub = ImportMock.mockFunction(UserService,
    'findUserWithToken', null);\r
  
    \    \r
  
    \    t.teardown(() => {\r
  
    \        fastify.close();\n"
  ...

# Subtest: ❌ Should return 500 if an internal error occurs
    not ok 1 - test unfinished
      ---
      at:
        fileName: src\modules\user\__test__\logout.test.ts
        lineNumber: 66
        columnNumber: 16
        typeName: Object
        generated:
          fileName: src/modules/user/__test__/logout.test.ts
          lineNumber: 76
          columnNumber: 16
      stack: >
        Object.<anonymous> (src/modules/user/__test__/logout.test.ts:66:16)
      
        Module.m._compile [as _compile]
        (node_modules/@isaacs/ts-node-temp-fork-for-pr-2009/dist/index.js:790:29)
        (node_modules/@isaacs/ts-node-temp-fork-for-pr-2009/src/index.ts:1368:23)
      
        Module.m._compile (node_modules/ts-node/dist/index.js:857:29)
        (node_modules/ts-node/src/index.ts:1618:23)
      
        require.extensions.<computed> (node_modules/ts-node/dist/index.js:859:16)
        (node_modules/ts-node/src/index.ts:1621:12)
      
        Object.require.extensions.<computed> [as .ts]
        (node_modules/@isaacs/ts-node-temp-fork-for-pr-2009/dist/index.js:792:16)
        (node_modules/@isaacs/ts-node-temp-fork-for-pr-2009/src/index.ts:1371:12)
      test: ❌ Should return 500 if an internal error occurs
      source: "    t.notOk(response.headers['set-cookie']);\r
      
        });\r
      
        \r
      
        test(\"❌ Should return 500 if an internal error occurs\", async (t) => {\r
      
        \    const fastify = build();\n"
      ...
    
    1..1
not ok 4 - ❌ Should return 500 if an internal error occurs # time=31.824ms
  ---
  at:
    fileName: src\modules\user\__test__\logout.test.ts
    lineNumber: 66
    columnNumber: 16
    typeName: Object
    generated:
      fileName: src/modules/user/__test__/logout.test.ts
      lineNumber: 76
      columnNumber: 16
  source: "    t.notOk(response.headers['set-cookie']);\r
  
    });\r
  
    \r
  
    test(\"❌ Should return 500 if an internal error occurs\", async (t) => {\r
  
    \    const fastify = build();\n"
  ...

not ok 5 - Connection is closed.
  ---
  stack: |
    EventEmitter.sendCommand (node_modules/ioredis/built/Redis.js:332:28)
    EventEmitter.quit (node_modules/ioredis/built/utils/Commander.js:90:25)
    Object.close (node_modules/@fastify/redis/index.js:126:24)
    Object._encapsulateTwoParam (node_modules/avvio/boot.js:558:13)
    Boot.closeWithCbOrNextTick (node_modules/avvio/boot.js:531:7)
    Task.release (node_modules/fastq/queue.js:171:16)
    worked (node_modules/fastq/queue.js:223:10)
    node_modules/fastify/fastify.js:479:15
  at:
    fileName: node_modules\ioredis\built\Redis.js
    lineNumber: 332
    columnNumber: 28
    typeName: EventEmitter
    methodName: sendCommand
    functionName: EventEmitter.sendCommand
  test: ✅ Should return 204 if no refresh token is provided
  source: |2
            }
            if (this.status === "end") {
                command.reject(new Error(utils_1.CONNECTION_CLOSED_ERROR_MSG));
    ---------------------------^
                return command.promise;
            }
  ...

1..5
